"""Declare external dependencies for rules_gleam.

This file is primarily for WORKSPACE-based setup. With bzlmod, most dependencies
are handled by MODULE.bazel and module extensions.
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//gleam/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//gleam/private:versions.bzl", "TOOL_VERSIONS")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

def rules_gleam_dependencies():
    """Fetches dependencies required by rules_gleam for WORKSPACE setup.

    This includes bazel_skylib and potentially sets up toolchains if not using bzlmod.
    """

    # bazel_skylib is a common utility library.
    http_archive(
        name = "bazel_skylib",
        sha256 = "bc283cdfcd526a52c3201279cda4bc298652efa898b10b4db0837dc51652756f",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
        ],
    )

    # For WORKSPACE users, platforms are also needed.
    http_archive(
        name = "platforms",
        sha256 = "cf65549303a068863702ac24f77f2a3750eadca4dce855f119c25020201f3d9d",
        urls = [
            "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.9/platforms-0.0.9.tar.gz",
            "https://github.com/bazelbuild/platforms/releases/download/0.0.9/platforms-0.0.9.tar.gz",
        ],
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for gleam toolchain"
_ATTRS = {
    "gleam_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _gleam_repo_impl(repository_ctx):
    platform = repository_ctx.attr.platform.replace("gnu", "musl")
    url = "https://github.com/gleam-lang/gleam/releases/download/v{0}/gleam-v{0}-{1}.tar.gz".format(
        repository_ctx.attr.gleam_version,
        platform,
    )
    repository_ctx.download_and_extract(
        url = url,
        integrity = TOOL_VERSIONS[repository_ctx.attr.gleam_version][repository_ctx.attr.platform],
    )
    build_content = """# Generated by gleam/repositories.bzl
load("@com_muchq_rules_gleam//gleam:toolchain.bzl", "gleam_toolchain")

gleam_toolchain(
    name = "gleam_toolchain",
    target_tool = select({
        "@bazel_tools//src/conditions:host_windows": "gleam.exe",
        "//conditions:default": "gleam",
    }),
    erlang_toolchain = "@local_config_erlang//:local_toolchain",
)
"""

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

gleam_repositories = repository_rule(
    _gleam_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def gleam_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "gleam_linux_amd64"
    - TODO: create a convenience repository for the host platform like "gleam_host"
    - create a repository exposing toolchains for each platform like "gleam_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "gleam1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each gleam_repositories call
    """
    for platform in PLATFORMS.keys():
        gleam_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
